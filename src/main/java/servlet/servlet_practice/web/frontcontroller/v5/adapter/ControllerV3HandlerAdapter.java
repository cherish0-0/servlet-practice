package servlet.servlet_practice.web.frontcontroller.v5.adapter;

import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import servlet.servlet_practice.web.frontcontroller.ModelView;
import servlet.servlet_practice.web.frontcontroller.v3.ControllerV3;
import servlet.servlet_practice.web.frontcontroller.v5.MyHandlerAdapter;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

/**
 * Handler Adapter for ControllerV3 implementations
 * This adapter allows ControllerV3 controllers to work with the V5 front controller
 * by converting between the different interfaces.
 */
public class ControllerV3HandlerAdapter implements MyHandlerAdapter {
    @Override
    public boolean supports(Object handler) {
        return (handler instanceof ControllerV3);
    }
/*
Adapts a ControllerV3 handler to work with the V5 front controller
This method:
   * 1. Casts the handler to ControllerV3
   * 2. Converts request parameters to a parameter map
   * 3. Processes the request through the controller
   * 4. Returns the ModelView generated by the controller
 */
    @Override
    public ModelView handle(HttpServletRequest request, HttpServletResponse response, Object handler) throws ServletException, IOException {
        // Cast the handler to ControllerV3 type
        ControllerV3 controller = (ControllerV3) handler;

        // Convert request parameters to a map for the controller
        Map<String, String> paramMap = createParamMap(request);

        // Process the request through the controller and get the ModelView
        ModelView mv = controller.process(paramMap);

        return mv;
    }

    private static Map<String, String> createParamMap(HttpServletRequest request) {
        Map<String, String> paramMap = new HashMap<>();
        request.getParameterNames().asIterator()
                .forEachRemaining(paramname -> paramMap.put(paramname, request.getParameter(paramname)));
        return paramMap;
    }
}
